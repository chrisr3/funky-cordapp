import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import static org.gradle.jvm.toolchain.JavaLanguageVersion.of
import static org.gradle.api.JavaVersion.VERSION_11

plugins {
    id 'net.corda.cordapp.cordapp-configuration'
    id 'org.jetbrains.kotlin.jvm' apply false
}

subprojects {
    group = 'com.example.funky'
    version = funkyVersion

    pluginManager.withPlugin('java') {
        java {
            toolchain {
                languageVersion = of(11)
            }

            testing {
                suites {
                    test {
                        useJUnitJupiter(junitVersion)
                    }
                }
            }
        }
    }

    pluginManager.withPlugin('org.jetbrains.kotlin.plugin.allopen') {
        allOpen {
            annotations(
                'javax.persistence.Entity',
                'javax.persistence.Embeddable',
                'javax.persistence.MappedSuperclass'
            )
        }
    }

    pluginManager.withPlugin('maven-publish') {
        tasks.register('install') {
            dependsOn 'publishToMavenLocal'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            languageVersion = '1.4'
            apiVersion = '1.4'
            verbose = true
            jvmTarget = VERSION_11
            freeCompilerArgs += [
                '-Xjvm-default=all',
                // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                '-Xskip-runtime-version-check',
                '-java-parameters'
            ]
        }
    }

    tasks.withType(Test).configureEach {
        doFirst {
            systemProperty 'java.io.tmpdir', buildDir.absolutePath
        }
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}

wrapper {
    gradleVersion = '7.3'
}
